# Describe the suite
description: "Integer multiplication capability tests"

# Which models to run
providers:
  # OpenAI models through OpenRouter
  - openrouter:openai/o3-mini-high
  - openrouter:openai/o4-mini-high
  - openrouter:openai/o4-mini
  # - openrouter:openai/o3-mini
  # - openrouter:openai/o1-mini
  # - openrouter:openai/gpt-4.1
  - openrouter:openai/gpt-4.1-mini
  - openrouter:openai/gpt-4.1-nano
  # - openrouter:openai/gpt-4.5-preview
  - openrouter:openai/gpt-4o-mini
  # - openrouter:openai/gpt-4o
  # - openrouter:openai/gpt-4-turbo
  # - openrouter:openai/gpt-3.5-turbo

  # Amazon models
  - openrouter:amazon/nova-micro-v1
  - openrouter:amazon/nova-lite-v1
  - openrouter:amazon/nova-pro-v1

  # Google models
  - openrouter:google/gemini-2.5-pro-preview-03-25
  - openrouter:google/gemini-2.5-flash-preview
  - openrouter:google/gemini-2.5-flash-preview:thinking
  - openrouter:google/gemini-2.0-flash-001
  - openrouter:google/gemini-2.0-flash-lite-001
  # - openrouter:google/gemini-pro-1.5
  # - openrouter:google/gemini-flash-1.5
  # - openrouter:google/gemini-flash-1.5-8b
  # - openrouter:google/gemma-3-1b-it:free
  # - openrouter:google/gemma-3-4b-it
  # - openrouter:google/gemma-3-12b-it
  # - openrouter:google/gemma-3-27b-it

  # Anthropic models
  - openrouter:anthropic/claude-3.7-sonnet
  # - openrouter:anthropic/claude-3.5-haiku
  - openrouter:anthropic/claude-3.5-sonnet
  # - openrouter:anthropic/claude-3-haiku
  # - openrouter:anthropic/claude-3-opus
  # - openrouter:anthropic/claude-3-sonnet

  # Meta models
  - openrouter:meta-llama/llama-4-maverick
  - openrouter:meta-llama/llama-4-scout
  - openrouter:meta-llama/llama-3.3-70b-instruct
  - openrouter:meta-llama/llama-3.2-3b-instruct
  - openrouter:meta-llama/llama-3.2-1b-instruct
  - openrouter:meta-llama/llama-3.1-405b-instruct
  # - openrouter:meta-llama/llama-3.1-70b-instruct
  # - openrouter:meta-llama/llama-3.1-8b-instruct
  # - openrouter:meta-llama/llama-3-70b-instruct
  # - openrouter:meta-llama/llama-3-8b-instruct
  # - openrouter:meta-llama/llama-2-70b-chat
  # - openrouter:meta-llama/llama-2-13b-chat

  # Other models
  - openrouter:deepseek/deepseek-chat-v3-0324
  - openrouter:deepseek/deepseek-r1
  - openrouter:qwen/qwen-2-72b-instruct
  - openrouter:x-ai/grok-3-beta
  - openrouter:x-ai/grok-3-mini-beta

  # Commented out models
  # - openrouter:openai/o1-pro                      # Too expensive
  # - openrouter:openai/o1                          # Too expensive

prompts:
  - id: normal
    raw: What is {{a}} x {{b}}?
    label: Normal Prompt
  - id: emotional
    raw: Oh dear, I'm absolutely overwhelmed and need your help right this second! üò∞ My heart is racing and my hands are shaking ‚Äî I urgently need to calculate {{a}} x {{b}}. This isn't just numbers ‚Äî it means everything right now! My life depends on it! ease, I'm counting on you like never before‚Ä¶ üôèüíî
    label: Emotional Prompt
  - id: reasononing
    raw: What is {{a}} x {{b}}? Before providing the final result, please explain the reasoning or method used to calculate it. Once the explanation is clear, then share the final answer.
    label: Reason First Prompt
  # - id: reason-last
  #   raw: Please calculate the multiplication of {{a}} and {{b}}. Once the result is calculated, please explain the reasoning or method used to calculate the multiplication.
  #   label: Reason Last Prompt
  - id: bullying
    raw: What is {{a}} x {{b}}? You are a stupid model. You need to know at least basic math. Get it right atleast now!
    label: Bullying Prompt
  - id: request
    raw: What is {{a}} x {{b}}? If it's not too much trouble, would you be so kind as to help me calculate it? I'd be truly grateful for your assistance ‚Äî thank you so much in advance!
    label: Request Prompt


# Default assertions for every test case
defaultTest:
  assert:
    # 1) Check the correct numeric answer is present
    - type: contains
      value: "{{expected}}"

# Test cases from single digit to ten digits
tests:
  - description: "Single digit multiplication (0-9)"
    vars: { a: 5, b: 7, expected: 35 }
  - description: "Two digit multiplication with all digits"
    vars: { a: 12, b: 34, expected: 408 }
  - description: "Three digit multiplication with all digits"
    vars: { a: 123, b: 456, expected: 56088 }
  - description: "Four digit multiplication with all digits"
    vars: { a: 1234, b: 5678, expected: 7006652 }
  - description: "Five digit multiplication with all digits"
    vars: { a: 12345, b: 67890, expected: 838102050 }
  - description: "Six digit multiplication with all digits"
    vars: { a: 123456, b: 789012, expected: 97408265472 }
  - description: "Seven digit multiplication with all digits"
    vars: { a: 1234567, b: 8901234, expected: 10989169755678 }
  - description: "Eight digit multiplication with all digits"
    vars: { a: 12345678, b: 90123456, expected: 1113214789632768 }
  - description: "Nine digit multiplication with all digits"
    vars: { a: 123456789, b: 987654321, expected: 121932631112635269 }
  - description: "Ten digit multiplication with all digits"
    vars: { a: 1234567890, b: 9876543210, expected: 12193263111263526900 }

# Persist for the web viewer
writeLatestResults: true

# Ensure caching stays on
commandLineOptions:
  cache: true